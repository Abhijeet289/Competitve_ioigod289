Given : You are given an array of integers.
Task : To find out maximum alternate sum. To be precise, you need to pick some elements. Lets say you picked k elements. So ele1 - ele2 + ele3 - ele4 .... +- elek has to  be maximised.
Solution : 
DP
Question : https://codeforces.com/contest/1420/problem/C1
DP Solution : https://codeforces.com/contest/1420/submission/95313158

GREEDY
Let's give a solution for a fixed array and then prove its optimality.
Let us name the element ai a local maximum if ai>ai−1 and ai>ai+1. Similarly let's call the element ai a local minimum if ai<ai−1 and ai<ai+1. If any of the ai−1 or ai+1 does not exist in the definitions above, we assume it is equal to −∞.
Note that the optimal subsequence will always be an odd length (otherwise we can delete the last element and increase the response). Elements with odd numbers shall be located at local maximums, and elements with even numbers — at local minimums.
It is not difficult to see that the first local maximum is always placed earlier than the first local minimum (otherwise it would happen that the initial permutation decreases from the first element to the local minimum, in which case the first element itself is the local maximum). Similarly, you may notice that the last local maximum always costs later than the last local minimum. Given that the local maximums and minimums alternate, you can simply take a subsequence of all the local maximums and minimums and get the best response.
Let's show that this construction is alpways optimal. Let's start with the case when an element with an odd number is not a local maximum. In this case, it shall be replaced with a bigger neighbor, and if the bigger neighbor is already in the sub-set, just delete both of these elements. After that, the response shall always increase. The same shall apply if the even-numbered element is not a local minimum. In this case, it may still happen that we cannot move the element downwards because it is on the edge. But then it is the last one in the subsequence, and it can be easily removed.
Thus, it is optimal to take only local highs and lows into the subsequence (considering that highs are on odd positions and lows — on even positions). It remains to be shown that it is profitable to take all local maximums and minimums. Indeed, if not all of them are involved, then there is a pair of standing local highs and lows. By adding them to the subsequence, we will increase the answer.
Okay. We know how to solve a problem for an initial array by reducing it to the sum of all local maximums and minimums. We will now learn how to process requests quickly. To do this, we will store whether an element is a local minimum or maximum and recalculate this information when exchanging elements. Suddenly it turns out that a single request will change the state of no more than six elements, so we can easily recalculate the response for O(1) per request.
Thus, we have a solution with an asymptotic O(n+q) in time.

Question : https://codeforces.com/contest/1420/problem/C2
Solution : https://codeforces.com/contest/1420/submission/95317207
